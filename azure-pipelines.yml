trigger:
- '*'

pool:
  vmImage: 'ubuntu-18.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.300'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
# Instead of the above, to restore packages from an Artifact feed from your AZDO organisation (Github repo must be connected)
##- task: NuGetCommand@2
##  displayName: 'Restore project dependencies'
##  inputs:
##    command: 'restore'
##    restoreSolution: '**/*.sln'
##    feedsToUse: 'select'
##    vstsFeed: '<project-name>/Tailspin.SpaceGame.Web.Models'
- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'
# Install the tools from the local manifest file (at the moment - reportgenerator)
- task: DotNetCoreCLI@2
  displayName: 'Install .NET Core tools from local manifest'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore'
# Run unit tests, but using Coverlet NuGet to collect coverage information 
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'
# Convert Cobetura output to HTML format using report generator
- task: DotNetCoreCLI@2
  displayName: 'Create code coverage report'
  inputs:
    command: custom
    custom: tool
    arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
# Publish report to the pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

# Analyses any open source dependencies for known vulnerabilities , and licenses
# Produces report you can see within your AZDO organisation
# Optionally add condition to only run this when PR is raised and the target to merge into is master
##- task: WhiteSource Bolt@20
##  displayName: 'Run WhiteSource Bolt'
##    condition: |
##     and
##     (
##         succeeded(),
##         eq(variables['Build.Reason'], 'PullRequest'),
##         eq(variables['System.PullRequest.TargetBranch'], 'master')
##     )
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

