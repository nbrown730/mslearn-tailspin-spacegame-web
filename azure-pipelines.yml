# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# Trigger this build pipeline on any branch 
trigger:
- '*'

pool:
  vmImage: 'ubuntu-18.04'
  demands:
  - npm

# Variables we use a lot that might change during the lifetime of this pipeline
variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.300'

steps:
# Use specific version of the SDK
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    packageType: sdk
    version: '$(dotnetSdkVersion)'

# Use NPM version 1 to run npm install --verbose as false (you need npm on the build system)
- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false
# Convert Sass Assets into plain CSS . Script task is a shortcut for CmdLine@2
- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'
# Minify JS and other required files
- task: gulp@1
  displayName: 'Run gulp tasks'
# Output the Build definition name, build id and build number of completed build into a buildinfo.txt file in the /wwwroot directory
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)
# Use the dotnet CLI to restore any dependencies (like npm install but for dotnet)
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'


# Build the ASP.NET Core application 
#- used if we are not doing templates
##- task: DotNetCoreCLI@2
##  displayName: 'Build the project - $(buildConfiguration)'
##  inputs:
##    command: 'build'
##   arguments: '--no-restore --configuration $(buildConfiguration)'
##    projects: '**/*.csproj'

# Output/publish/package the build result + dependencies to whatever the staging directory is /Release and zip it
#- used if we are not using templates
##- task: DotNetCoreCLI@2
##  displayName: 'Publish the Project - $(buildConfiguration)'
##  inputs:
##    command: 'publish'
##    projects: '**/*.csproj'
##    publishWebProjects: false
##    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
##    zipAfterPublish: true

# Use the template step instead and inject parameters into it for reusable steps from this parent PaC file
# Benefit of this way is we can do the above two steps for both Debug and release at the same time!
- template: 'templates/build.yml'
  parameters:
    buildConfiguration: 'Debug'

- template: 'templates/build.yml'
  parameters:
    buildConfiguration: 'Release'

# Publish the build artifacts to Azure Pipelines (condition succeeded means only run if previous task has succeeded)
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact - Drop'
  condition: succeeded()